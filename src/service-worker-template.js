import { precacheAndRoute, cleanupOutdatedCaches } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate, NetworkFirst, CacheFirst } from 'workbox-strategies';
import { ExpirationPlugin } from 'workbox-expiration';
import { clientsClaim } from 'workbox-core';
import { NetworkOnly } from 'workbox-strategies';

// Adopt the clients immediately
self.skipWaiting();
clientsClaim();

// This allows the web app to trigger skipWaiting via registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

// Clean up old cache versions
cleanupOutdatedCaches();

// Precache all assets generated by your build process
// Their URLs are injected into the manifest variable below by the Workbox plugin
precacheAndRoute(self.__WB_MANIFEST);

// In your service worker or workbox config
registerRoute(
  ({ url }) => url.pathname.endsWith('.wasm'),
  new NetworkFirst({ cacheName: 'wasm-files', networkTimeoutSeconds: 10 })
);

// Cache the Google Fonts stylesheets with a stale-while-revalidate strategy
registerRoute(
  ({ url }) => url.origin === 'https://fonts.googleapis.com',
  new StaleWhileRevalidate({
    cacheName: 'google-fonts-stylesheets',
  })
);

// Cache the Google Fonts webfont files with a cache-first strategy for 1 year
registerRoute(
  ({ url }) => url.origin === 'https://fonts.gstatic.com',
  new CacheFirst({
    cacheName: 'google-fonts-webfonts',
    plugins: [
      new ExpirationPlugin({
        maxAgeSeconds: 60 * 60 * 24 * 365, // 1 year
        maxEntries: 30,
      }),
    ],
  })
);

// Cache images with a cache-first strategy
registerRoute(
  ({ request }) => request.destination === 'image',
  new CacheFirst({
    cacheName: 'images',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 60,
        maxAgeSeconds: 30 * 24 * 60 * 60, // 30 Days
      }),
    ],
  })
);

// Cache locally captured images
registerRoute(
  ({ request, url }) =>
    request.destination === 'image' &&
    url.pathname.includes('camera_'),
  new CacheFirst({
    cacheName: 'captured-images',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 50,
        maxAgeSeconds: 7 * 24 * 60 * 60, // 7 days
      }),
    ],
  })
);

// Handle API requests with a network-first approach
registerRoute(
  ({ url }) => url.pathname.startsWith('/api/'),
  new NetworkFirst({
    cacheName: 'api-responses',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 100,
        maxAgeSeconds: 24 * 60 * 60, // 24 hours
      }),
    ],
  })
);

// Ensure health endpoint always comes from the network and is never cached
registerRoute(
  ({ url }) => url.pathname.endsWith('/health'),
  new NetworkOnly({
    plugins: [
      {
        // Optional - log when health check fails due to network
        fetchDidFail: async ({ request }) => {
          console.log('Health check failed - network unavailable');
        }
      }
    ]
  })
);

// Offline fallback - use a custom handler to avoid conflicts with Workbox's default handlers
self.addEventListener('fetch', (event) => {
  const url = new URL(event.request.url);
  if (url.pathname.endsWith('.wasm')) {
    event.respondWith(
      fetch(event.request)
        .catch(() => caches.match(event.request))
    );
    return;
  }

  // Only handle navigation requests, let Workbox handle the rest
  if (event.request.mode === 'navigate') {
    event.respondWith(
      (async () => {
        try {
          // First, try to use the navigation preload response if it's supported
          const preloadResponse = await event.preloadResponse;
          if (preloadResponse) {
            return preloadResponse;
          }

          // Otherwise, try the network
          return await fetch(event.request);
        } catch (error) {
          // If offline, show the offline page
          const cache = await caches.open('offline-fallbacks');
          return await cache.match('/offline.html') || Response.error();
        }
      })()
    );
  }
});

// Cache other assets with a stale-while-revalidate strategy
registerRoute(
  // Match all other requests
  ({ request }) =>
    // request.destination === 'script' ||
    request.destination === 'style' ||
    request.destination === 'font',
  new StaleWhileRevalidate({
    cacheName: 'static-resources',
  })
);

// Cache IFC files specifically with a cache-first strategy
registerRoute(
  ({ request }) => request.url.endsWith('.ifc'),
  new CacheFirst({
    cacheName: 'ifc-models',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 10,
        maxAgeSeconds: 7 * 24 * 60 * 60, // 7 days
      }),
    ],
  })
);

// Special handling for the offline page - ensure it's cached on install
self.addEventListener('install', (event) => {
  event.waitUntil(
    caches.open('offline-fallbacks').then((cache) => {
      return cache.add('/offline.html');
    })
  );
});